name: Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday at midnight

jobs:
  integration-test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Build backend
      working-directory: backend
      run: ./mvnw clean package -DskipTests
    
    - name: Start backend server
      working-directory: backend
      run: |
        java -jar target/*.jar &
        echo $! > backend.pid
      env:
        SPRING_REDIS_HOST: localhost
        SPRING_REDIS_PORT: 6379
    
    - name: Wait for backend to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8080/actuator/health 2>/dev/null; do sleep 2; done' || true
        sleep 5
    
    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci
    
    - name: Build frontend
      working-directory: frontend
      run: npm run build
    
    - name: Run integration tests
      working-directory: frontend
      run: npm test -- --watchAll=false
      env:
        CI: true
        REACT_APP_API_URL: http://localhost:8080
    
    - name: Stop backend server
      if: always()
      run: |
        if [ -f backend/backend.pid ]; then
          kill $(cat backend/backend.pid) || true
        fi

  docker-compose-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Start services with Docker Compose
      run: docker compose up -d
    
    - name: Wait for services to be ready
      run: |
        timeout 120 bash -c 'until curl -f http://localhost:8080/actuator/health 2>/dev/null; do sleep 5; done' || true
        timeout 120 bash -c 'until curl -f http://localhost 2>/dev/null; do sleep 5; done' || true
        sleep 10
    
    - name: Check service health
      run: |
        curl -f http://localhost:8080/actuator/health || exit 1
        curl -f http://localhost || exit 1
    
    - name: Display logs on failure
      if: failure()
      run: docker compose logs
    
    - name: Stop services
      if: always()
      run: docker compose down -v
